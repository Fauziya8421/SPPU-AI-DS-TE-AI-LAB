import sys

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def min_distance(self, dist, spt_set):
        min_val = sys.maxsize
        min_index = 0

        for v in range(self.V):
            if dist[v] < min_val and not spt_set[v]:
                min_val = dist[v]
                min_index = v

        return min_index

    def dijkstra(self, src):
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        spt_set = [False] * self.V

        for _ in range(self.V):
            u = self.min_distance(dist, spt_set)
            spt_set[u] = True

            for v in range(self.V):
                if not spt_set[v] and self.graph[u][v] and dist[u] + self.graph[u][v] < dist[v]:
                    dist[v] = dist[u] + self.graph[u][v]

        self.print_solution(dist)

    def print_solution(self, dist):
        print("Vertex \tDistance from Source")
        for i in range(self.V):
            print(i, "\t", dist[i])

# Take user input for the number of vertices
num_vertices = int(input("Enter the number of vertices: "))
g = Graph(num_vertices)

# Take user input for the graph
print("Enter the graph as an adjacency matrix (0 for no edge, otherwise weight):")
for i in range(num_vertices):
    g.graph[i] = list(map(int, input().split()))

# Take user input for the source vertex
source_vertex = int(input("Enter the source vertex: "))

g.dijkstra(source_vertex)

